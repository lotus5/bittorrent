/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: protobuf/bittorent.proto */

#ifndef PROTOBUF_C_protobuf_2fbittorent_2eproto__INCLUDED
#define PROTOBUF_C_protobuf_2fbittorent_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Node Node;
typedef struct _KeepAlive KeepAlive;
typedef struct _Choke Choke;
typedef struct _Unchoke Unchoke;
typedef struct _Interested Interested;
typedef struct _NotInterested NotInterested;
typedef struct _Have Have;
typedef struct _Bitfield Bitfield;
typedef struct _Request Request;
typedef struct _Piece Piece;
typedef struct _Cancel Cancel;
typedef struct _Port Port;
typedef struct _ChordMessage ChordMessage;


/* --- enums --- */


/* --- messages --- */

struct  _Node
{
  ProtobufCMessage base;
  uint64_t key;
  uint32_t address;
  uint32_t port;
};
#define NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node__descriptor) \
    , 0, 0, 0 }


/*
 * Keep Alive
 */
struct  _KeepAlive
{
  ProtobufCMessage base;
  int32_t len;
};
#define KEEP_ALIVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&keep_alive__descriptor) \
    , 0 }


/*
 * Choke
 */
struct  _Choke
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
};
#define CHOKE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&choke__descriptor) \
    , 0, 0 }


/*
 * Unchoke
 */
struct  _Unchoke
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
};
#define UNCHOKE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unchoke__descriptor) \
    , 0, 0 }


/*
 * Interested
 */
struct  _Interested
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
};
#define INTERESTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&interested__descriptor) \
    , 0, 0 }


/*
 * Not Interested
 */
struct  _NotInterested
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
};
#define NOT_INTERESTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&not_interested__descriptor) \
    , 0, 0 }


/*
 * Have
 */
struct  _Have
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
  int32_t pieceid;
};
#define HAVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&have__descriptor) \
    , 0, 0, 0 }


/*
 * Bitfield
 */
struct  _Bitfield
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
  int32_t bitfield;
};
#define BITFIELD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bitfield__descriptor) \
    , 0, 0, 0 }


/*
 * Request
 */
struct  _Request
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
  int32_t index;
  int32_t begin;
  int32_t length;
};
#define REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request__descriptor) \
    , 0, 0, 0, 0, 0 }


/*
 * Piece
 */
struct  _Piece
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
  int32_t index;
  int32_t begin;
  int32_t block;
};
#define PIECE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&piece__descriptor) \
    , 0, 0, 0, 0, 0 }


/*
 * Cancel
 */
struct  _Cancel
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
  int32_t index;
  int32_t begin;
  int32_t length;
};
#define CANCEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cancel__descriptor) \
    , 0, 0, 0, 0, 0 }


/*
 * Port
 */
struct  _Port
{
  ProtobufCMessage base;
  int32_t len;
  int32_t id;
  int32_t listenport;
};
#define PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&port__descriptor) \
    , 0, 0, 0 }


typedef enum {
  CHORD_MESSAGE__MSG__NOT_SET = 0,
  CHORD_MESSAGE__MSG_KEEP_ALIVE = 2,
  CHORD_MESSAGE__MSG_CHOKE = 3,
  CHORD_MESSAGE__MSG_UNCHOKE = 4,
  CHORD_MESSAGE__MSG_INTERESTED = 5,
  CHORD_MESSAGE__MSG_NOT_INTERESTED = 6,
  CHORD_MESSAGE__MSG_HAVE = 7,
  CHORD_MESSAGE__MSG_BITFIELD = 8,
  CHORD_MESSAGE__MSG_REQUEST = 9,
  CHORD_MESSAGE__MSG_PIECE = 10,
  CHORD_MESSAGE__MSG_CANCEL = 11,
  CHORD_MESSAGE__MSG_PORT = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHORD_MESSAGE__MSG)
} ChordMessage__MsgCase;

struct  _ChordMessage
{
  ProtobufCMessage base;
  uint32_t version;
  ChordMessage__MsgCase msg_case;
  union {
    KeepAlive *keep_alive;
    Choke *choke;
    Unchoke *unchoke;
    Interested *interested;
    NotInterested *not_interested;
    Have *have;
    Bitfield *bitfield;
    Request *request;
    Piece *piece;
    Cancel *cancel;
    Port *port;
  };
};
#define CHORD_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chord_message__descriptor) \
    , 417u, CHORD_MESSAGE__MSG__NOT_SET, {0} }


/* Node methods */
void   node__init
                     (Node         *message);
size_t node__get_packed_size
                     (const Node   *message);
size_t node__pack
                     (const Node   *message,
                      uint8_t             *out);
size_t node__pack_to_buffer
                     (const Node   *message,
                      ProtobufCBuffer     *buffer);
Node *
       node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node__free_unpacked
                     (Node *message,
                      ProtobufCAllocator *allocator);
/* KeepAlive methods */
void   keep_alive__init
                     (KeepAlive         *message);
size_t keep_alive__get_packed_size
                     (const KeepAlive   *message);
size_t keep_alive__pack
                     (const KeepAlive   *message,
                      uint8_t             *out);
size_t keep_alive__pack_to_buffer
                     (const KeepAlive   *message,
                      ProtobufCBuffer     *buffer);
KeepAlive *
       keep_alive__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   keep_alive__free_unpacked
                     (KeepAlive *message,
                      ProtobufCAllocator *allocator);
/* Choke methods */
void   choke__init
                     (Choke         *message);
size_t choke__get_packed_size
                     (const Choke   *message);
size_t choke__pack
                     (const Choke   *message,
                      uint8_t             *out);
size_t choke__pack_to_buffer
                     (const Choke   *message,
                      ProtobufCBuffer     *buffer);
Choke *
       choke__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   choke__free_unpacked
                     (Choke *message,
                      ProtobufCAllocator *allocator);
/* Unchoke methods */
void   unchoke__init
                     (Unchoke         *message);
size_t unchoke__get_packed_size
                     (const Unchoke   *message);
size_t unchoke__pack
                     (const Unchoke   *message,
                      uint8_t             *out);
size_t unchoke__pack_to_buffer
                     (const Unchoke   *message,
                      ProtobufCBuffer     *buffer);
Unchoke *
       unchoke__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unchoke__free_unpacked
                     (Unchoke *message,
                      ProtobufCAllocator *allocator);
/* Interested methods */
void   interested__init
                     (Interested         *message);
size_t interested__get_packed_size
                     (const Interested   *message);
size_t interested__pack
                     (const Interested   *message,
                      uint8_t             *out);
size_t interested__pack_to_buffer
                     (const Interested   *message,
                      ProtobufCBuffer     *buffer);
Interested *
       interested__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   interested__free_unpacked
                     (Interested *message,
                      ProtobufCAllocator *allocator);
/* NotInterested methods */
void   not_interested__init
                     (NotInterested         *message);
size_t not_interested__get_packed_size
                     (const NotInterested   *message);
size_t not_interested__pack
                     (const NotInterested   *message,
                      uint8_t             *out);
size_t not_interested__pack_to_buffer
                     (const NotInterested   *message,
                      ProtobufCBuffer     *buffer);
NotInterested *
       not_interested__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   not_interested__free_unpacked
                     (NotInterested *message,
                      ProtobufCAllocator *allocator);
/* Have methods */
void   have__init
                     (Have         *message);
size_t have__get_packed_size
                     (const Have   *message);
size_t have__pack
                     (const Have   *message,
                      uint8_t             *out);
size_t have__pack_to_buffer
                     (const Have   *message,
                      ProtobufCBuffer     *buffer);
Have *
       have__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   have__free_unpacked
                     (Have *message,
                      ProtobufCAllocator *allocator);
/* Bitfield methods */
void   bitfield__init
                     (Bitfield         *message);
size_t bitfield__get_packed_size
                     (const Bitfield   *message);
size_t bitfield__pack
                     (const Bitfield   *message,
                      uint8_t             *out);
size_t bitfield__pack_to_buffer
                     (const Bitfield   *message,
                      ProtobufCBuffer     *buffer);
Bitfield *
       bitfield__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bitfield__free_unpacked
                     (Bitfield *message,
                      ProtobufCAllocator *allocator);
/* Request methods */
void   request__init
                     (Request         *message);
size_t request__get_packed_size
                     (const Request   *message);
size_t request__pack
                     (const Request   *message,
                      uint8_t             *out);
size_t request__pack_to_buffer
                     (const Request   *message,
                      ProtobufCBuffer     *buffer);
Request *
       request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request__free_unpacked
                     (Request *message,
                      ProtobufCAllocator *allocator);
/* Piece methods */
void   piece__init
                     (Piece         *message);
size_t piece__get_packed_size
                     (const Piece   *message);
size_t piece__pack
                     (const Piece   *message,
                      uint8_t             *out);
size_t piece__pack_to_buffer
                     (const Piece   *message,
                      ProtobufCBuffer     *buffer);
Piece *
       piece__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   piece__free_unpacked
                     (Piece *message,
                      ProtobufCAllocator *allocator);
/* Cancel methods */
void   cancel__init
                     (Cancel         *message);
size_t cancel__get_packed_size
                     (const Cancel   *message);
size_t cancel__pack
                     (const Cancel   *message,
                      uint8_t             *out);
size_t cancel__pack_to_buffer
                     (const Cancel   *message,
                      ProtobufCBuffer     *buffer);
Cancel *
       cancel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cancel__free_unpacked
                     (Cancel *message,
                      ProtobufCAllocator *allocator);
/* Port methods */
void   port__init
                     (Port         *message);
size_t port__get_packed_size
                     (const Port   *message);
size_t port__pack
                     (const Port   *message,
                      uint8_t             *out);
size_t port__pack_to_buffer
                     (const Port   *message,
                      ProtobufCBuffer     *buffer);
Port *
       port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   port__free_unpacked
                     (Port *message,
                      ProtobufCAllocator *allocator);
/* ChordMessage methods */
void   chord_message__init
                     (ChordMessage         *message);
size_t chord_message__get_packed_size
                     (const ChordMessage   *message);
size_t chord_message__pack
                     (const ChordMessage   *message,
                      uint8_t             *out);
size_t chord_message__pack_to_buffer
                     (const ChordMessage   *message,
                      ProtobufCBuffer     *buffer);
ChordMessage *
       chord_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chord_message__free_unpacked
                     (ChordMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Node_Closure)
                 (const Node *message,
                  void *closure_data);
typedef void (*KeepAlive_Closure)
                 (const KeepAlive *message,
                  void *closure_data);
typedef void (*Choke_Closure)
                 (const Choke *message,
                  void *closure_data);
typedef void (*Unchoke_Closure)
                 (const Unchoke *message,
                  void *closure_data);
typedef void (*Interested_Closure)
                 (const Interested *message,
                  void *closure_data);
typedef void (*NotInterested_Closure)
                 (const NotInterested *message,
                  void *closure_data);
typedef void (*Have_Closure)
                 (const Have *message,
                  void *closure_data);
typedef void (*Bitfield_Closure)
                 (const Bitfield *message,
                  void *closure_data);
typedef void (*Request_Closure)
                 (const Request *message,
                  void *closure_data);
typedef void (*Piece_Closure)
                 (const Piece *message,
                  void *closure_data);
typedef void (*Cancel_Closure)
                 (const Cancel *message,
                  void *closure_data);
typedef void (*Port_Closure)
                 (const Port *message,
                  void *closure_data);
typedef void (*ChordMessage_Closure)
                 (const ChordMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor node__descriptor;
extern const ProtobufCMessageDescriptor keep_alive__descriptor;
extern const ProtobufCMessageDescriptor choke__descriptor;
extern const ProtobufCMessageDescriptor unchoke__descriptor;
extern const ProtobufCMessageDescriptor interested__descriptor;
extern const ProtobufCMessageDescriptor not_interested__descriptor;
extern const ProtobufCMessageDescriptor have__descriptor;
extern const ProtobufCMessageDescriptor bitfield__descriptor;
extern const ProtobufCMessageDescriptor request__descriptor;
extern const ProtobufCMessageDescriptor piece__descriptor;
extern const ProtobufCMessageDescriptor cancel__descriptor;
extern const ProtobufCMessageDescriptor port__descriptor;
extern const ProtobufCMessageDescriptor chord_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_protobuf_2fbittorent_2eproto__INCLUDED */
